### UTILITY
clear_history_interval:            1 YEAR   # Как долго бот хранит историю
repeat_control_interval:           6 HOUR   # На каком интервале времени бот ищет повторяющиеся сообщения.
answer_search_in_history_interval: 6 HOUR   # На каком интервале времени бот ищет готовые ответы в истории
flood_check_interval:              2 MINUTE # На каком интервале времени бот считает сообщения (для определения флуда)

# TODO переписать всё определение типов сообщений на regex

### KEYWORDS
like_male:    такой
like_female:  такая
like_group:   такие
time_past:    был
time_future:  буд
place_from:   откуда
place_to:     куда

# Слово, разделяющее варианты ответа. Должно быть одним словом.
option_limiter: или # single word
# Слово, останавливающее одобрение ответов в режиме проверки обучения
approve_fin:    fin

### MULTIPLE KEYWORDS

# Слова - паразиты, которые не надо учитывать, если они находятся в начале фразы
parasite_word: ["а", "ну", "или", "хм", "кстати"]

# Все регулярные выражения используются в функции std::regex_match()
# Строку перед сравнением очищают от знаков препинания и приводят к нижнему регистру
detector:
    
    # Фраза, с которой начинается запрос к википедии + пробел после неё (знак того, что после неё есть другие слова)
    # '[^ ][\w\W]*' приписывается программой в конец
    what_is: '(что|ч[её]|шо|щ[оё]|што) (такое|таке|значит) '
    
    # Обязательно одно слово
    repeat:  '(повтори) [^ ][\w\W]*'
    
    possibility: '(вероятность|шанс|инфа)( [\w\W]*)?'
    
    reason: '([\w\W]* )?(почему|зачем|по какой причине|по причине чего|причина|пачиму)( [\w\W]*)?'
    
    person: '([\w\W]* )?([кх]то)( [\w\W]*)?'
    
    count: '([\w\W]* )?(сколько|как много|сколька|скока|скоко|скок)( [\w\W]*)?'
    
    time: '([\w\W]* )?(когда)( [\w\W]*)?'
    
    location: '([\w\W]* )?(где|куда|откуда)( [\w\W]*)?'
    
    solution: '([\w\W]* )?(как)( [\w\W]*)?'
    
    evaluate: '(как т[еи]бе|оцени)( [\w\W]*)?'
    
    # mathe: '([пс]осч[eи]тай|ско(лько|ка) буд[еи]т) [ 0123456789\+-\(\)\*/\^]'
    
    teach_del: '(del|п|дальше)'
    


mathe_prefix: ["посчитай", "Посчитай", "сколько будет", "Сколько будет", "сосчитай", "Сосчитай"]


