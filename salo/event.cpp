/*
*
* SaloIntellect project
* Copyright (C) 2015-2020 Motylenok Mikhail, Makarevich Nikita
* 
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
* 
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
* 
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
*
*/

#include <iostream>
#include "headers/bots.h"
#include "vk/headers/vkcom.h"
#include "telegram/headers/telegram.h"

/*

–ü–µ—Ä–≤–æ–µ –ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ?

*/

bool user_is_new(const std::string &userID, const std::string& botname)
{
	std::string dbname = "SALODATABASE";
	//if (BOT_NAME == "salo" || BOT_NAME == "shava" || BOT_NAME == "kim" || BOT_NAME == "doshik" || BOT_NAME == "dedmoroz")
	//	dbname = "SALODATABASE";
	if (botname == "maryana") dbname = "MARYANA";
	if (botname == "grib") dbname = "GRIBDATABASE";
	if (!botname.empty() && botname.substr(0, 10) == "commercial") dbname = "COMMERCIALBOTS";
	std::vector<std::string> res = database->database_returnQuery("SELECT COUNT(*) FROM `"+dbname+"`.`user` WHERE `id` = '"+userID+"';").RowStrings;
	if (!res.empty() && res[0] != "0" && res[0] != "") return false;
	res = database->database_returnQuery("SELECT COUNT(*) FROM `"+dbname+"`.`web_user` WHERE `id` = '"+userID+"';").RowStrings;
	if (!res.empty() && res[0] != "0" && res[0] != "") return false;
	res = database->database_returnQuery("SELECT COUNT(*) FROM `"+dbname+"`.`user_reserve` WHERE `id` = '"+userID+"';").RowStrings;
	if (!res.empty() && res[0] != "0" && res[0] != "") return false;
	return true;
}


/*

–ú–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞—é—â–∏–π—Å—è –ø—Ä–∏ –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –≤ –≥—Ä—É–ø–ø–∞—Ö –í–ö–æ–Ω—Ç–∞–∫—Ç–µ

*/

void bot::OnEvent(const std::string& eventType, Person sender, CONFIGURATION config)
{
	//std::cout << sender.Name << " " << sender.Last << " " << eventType << std::endl;

	/*
	
	–ó–Ω–∞—á–µ–Ω–∏—è eventType:
		
		–í–∫–æ–Ω—Ç–∞–∫—Ç–µ:

		"join" - —é–∑–µ—Ä –≤—Å—Ç—É–ø–∏–ª –≤ –≥—Ä—É–ø–ø—É
		"leave" - —é–∑–µ—Ä –ø–æ–∫–∏–Ω—É–ª –≥—Ä—É–ø–ø—É 

		–¢–µ–ª–µ–≥—Ä–∞–º:

		"telegram_new_chat_members" - –¥–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ —á–∞—Ç–∞
		"telegram_left_chat_member" - —É—á–∞—Å—Ç–Ω–∏–∫ —á–∞—Ç–∞ –≤—ã—à–µ–ª
		"telegram_group_chat_created" - —Å–æ–∑–¥–∞–Ω–∞ –∫–æ–Ω—Ñ–∞ —Å –±–æ—Ç–æ–º
		"telegram_new_chat_title" - –ø–æ–º–µ–Ω—è–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ—ã 

	*/

	if(eventType == "join")
	{
		std::string answ = "(bot) –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É, "+sender.Name+" "+sender.Last+"!\n\nüöÄ\
–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–º—É —á—Ç–æ-–Ω–∏–±—É–¥—å. –ë–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã - –∏—Ö —Å–ø–∏—Å–æ–∫ –≤—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å, –æ—Ç–ø—Ä–∞–≤–∏–≤ –±–æ—Ç—É —Å–ª–æ–≤–æ \"–ø–æ–º–æ—â—å\"\
\n\n–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ø—Ä–æ–µ–∫—Ç–æ–º \"–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –°–∞–ª–æ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç\" (https://vk.com/saloint_club).‚úî\
–¢–∞–º –∂–µ –≤—ã –Ω–∞–π–¥–µ—Ç–µ –¥—Ä—É–≥–∏—Ö –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã—Ö –±–æ—Ç–æ–≤ (–Ω–∞—à–∏—Ö –∏ –Ω–µ —Ç–æ–ª—å–∫–æ), —Å–º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –≤—ã—Å–∫–∞–∑–∞—Ç—å –º–Ω–µ–Ω–∏–µ üòâ";

		if(config.INTERFACE == "networking_vkgroup") 
		{
			//SendMessageVK(answer.text, reponse_id, answer.attachment); 
			networking_vkcom* thisVK = dynamic_cast<networking_vkcom*>(getInterfaceByUniqueName(config.INTERFACE_UNIQUE_IDENTIFICATOR));
			
			if (user_is_new(BOT_NAME + "_networking_vkgroup_" + sender.IDENTIFICATOR, BOT_NAME))
			{
				thisVK->interfaceAnswer.HaveMessage = false;
				return;
			}
			
			thisVK->interfaceAnswer.messageText = answ;
			thisVK->interfaceAnswer.messageAttachment = "null";
			thisVK->interfaceAnswer.userID = sender.userID;
			thisVK->interfaceAnswer.HaveMessage = true;
			thisVK->interfaceAnswer.selfKick = false;
		}
	}

	if(eventType == "leave")
	{
		std::string answ = "(bot) –ü–æ–∫–∞, "+sender.Name+" "+sender.Last+"! –ë—ã–ª —Ä–∞–¥ –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É! üíå";

		if(config.INTERFACE == "networking_vkgroup") 
		{
			//SendMessageVK(answer.text, reponse_id, answer.attachment); 
			networking_vkcom* thisVK = dynamic_cast<networking_vkcom*>(getInterfaceByUniqueName(config.INTERFACE_UNIQUE_IDENTIFICATOR));
			
			if (user_is_new(BOT_NAME + "_networking_vkgroup_" + sender.IDENTIFICATOR, BOT_NAME))
			{
				thisVK->interfaceAnswer.HaveMessage = false;
				return;
			}
			
			thisVK->interfaceAnswer.messageText = answ;
			thisVK->interfaceAnswer.messageAttachment = "null";
			thisVK->interfaceAnswer.userID = sender.userID;
			thisVK->interfaceAnswer.HaveMessage = true;
			thisVK->interfaceAnswer.selfKick = false;
		}
	}

	if(eventType == "telegram_new_chat_members")
	{
		srand(time(NULL));
		int val = rand() % 4;
		std::string answ;

		switch(val)
		{
			case 0: answ = "–í—Å–µ–º –ø—Ä–∏–≤–µ—Ç! üíå"; break;
			case 1: answ = "–ö–∞–∫–∏–µ –ª—é–¥–∏!"; break;
			case 2: answ = "–ù—É –≤–æ—Ç –º—ã –∏ –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏—Å—å..."; break;
			case 3: answ = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üñêü§òüôè"; break;
			default: answ = "–í—Å–µ–º –ø—Ä–∏–≤–µ—Ç! üíå"; break;
		}

		if(config.INTERFACE == "networking_telegram")
		{
			int attach_type = 0;
		
			networking_telegram* thisTG = dynamic_cast<networking_telegram*>(getInterfaceByUniqueName(config.INTERFACE_UNIQUE_IDENTIFICATOR));

			thisTG->interfaceAnswerTG.messageText = answ;
			thisTG->interfaceAnswerTG.messageAttachment = "null";
			thisTG->interfaceAnswerTG.attachtype = attach_type;
			thisTG->interfaceAnswerTG.chatID = config.confId;
			thisTG->interfaceAnswerTG.HaveMessage = true;
		}
	}

	if(eventType == "telegram_left_chat_member")
	{
		srand(time(NULL));
		int val = rand() % 4;
		std::string answ;

		switch(val)
		{
			case 0: answ = "–ü—Ñ—Ñ—Ñ, –º–Ω–µ –æ–Ω –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –Ω—Ä–∞–≤–∏–ª—Å—è! üôÉ"; break;
			case 1: answ = "–°–∫—É—á–∞—Ç—å –Ω–µ –±—É–¥—É."; break;
			case 2: answ = "–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Ö–æ—Ç—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ."; break;
			case 3: answ = "–ê—Ö–∞—Ö–∞ üôè"; break;
			default: answ = "–ù—É –∫–∞–∫ –∂–µ —Ç–∞–∫"; break;
		}

		if(config.INTERFACE == "networking_telegram")
		{
			int attach_type = 0;
		
			networking_telegram* thisTG = dynamic_cast<networking_telegram*>(getInterfaceByUniqueName(config.INTERFACE_UNIQUE_IDENTIFICATOR));

			thisTG->interfaceAnswerTG.messageText = answ;
			thisTG->interfaceAnswerTG.messageAttachment = "null";
			thisTG->interfaceAnswerTG.attachtype = attach_type;
			thisTG->interfaceAnswerTG.chatID = config.confId;
			thisTG->interfaceAnswerTG.HaveMessage = true;
		}
	}

	if(eventType == "telegram_group_chat_created")
	{
		srand(time(NULL));
		int val = rand() % 4;
		std::string answ;

		switch(val)
		{
			case 0: answ = "–ù—É, —Å –±–æ–≥–æ–º!"; break;
			case 1: answ = "–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è..."; break;
			case 2: answ = "–ö–µ–∫, —á–µ –∑–∞ –±–∞–∑–∞—Ä?"; break;
			case 3: answ = "–ê—Ö–∞—Ö–∞, –±–æ—Ç–∞ –∑–≤–∞–ª–∏? ü§†"; break;
			default: answ = "–ü—Ä–∏–≤–µ–¥ –º–µ–¥–≤–µ–¥"; break;
		}

		if(config.INTERFACE == "networking_telegram")
		{
			int attach_type = 0;
		
			networking_telegram* thisTG = dynamic_cast<networking_telegram*>(getInterfaceByUniqueName(config.INTERFACE_UNIQUE_IDENTIFICATOR));

			thisTG->interfaceAnswerTG.messageText = answ;
			thisTG->interfaceAnswerTG.messageAttachment = "null";
			thisTG->interfaceAnswerTG.attachtype = attach_type;
			thisTG->interfaceAnswerTG.chatID = config.confId;
			thisTG->interfaceAnswerTG.HaveMessage = true;
		}
	}

	if(eventType == "telegram_new_chat_title")
	{
		srand(time(NULL));
		int val = rand() % 4;
		std::string answ;

		switch(val)
		{
			case 0: answ = "–ú–Ω–µ —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–æ–ª—å—à–µ –Ω—Ä–∞–≤–∏—Ç—Å—è."; break;
			case 1: answ = "–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è..."; break;
			case 2: answ = "–ó–∞–¥–æ–ª–±–∞–ª–∏ –º–µ–Ω—è—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ"; break;
			case 3: answ = "–ö–µ–∫ üôà"; break;
			default: answ = "–ü—Ä–∏–≤–µ–¥ –º–µ–¥–≤–µ–¥"; break;
		}

		if(config.INTERFACE == "networking_telegram")
		{
			int attach_type = 0;
		
			networking_telegram* thisTG = dynamic_cast<networking_telegram*>(getInterfaceByUniqueName(config.INTERFACE_UNIQUE_IDENTIFICATOR));

			thisTG->interfaceAnswerTG.messageText = answ;
			thisTG->interfaceAnswerTG.messageAttachment = "null";
			thisTG->interfaceAnswerTG.attachtype = attach_type;
			thisTG->interfaceAnswerTG.chatID = config.confId;
			thisTG->interfaceAnswerTG.HaveMessage = true;
		}
	}
}


